3892a3893
> 
3905,3906c3906,3907
< 	ctxt->instate = XML_PARSER_ATTRIBUTE_VALUE;
< 	limit = '"';
---
>         ctxt->instate = XML_PARSER_ATTRIBUTE_VALUE;
>         limit = '"';
3909,3910c3910,3911
< 	limit = '\'';
< 	ctxt->instate = XML_PARSER_ATTRIBUTE_VALUE;
---
>         limit = '\'';
>         ctxt->instate = XML_PARSER_ATTRIBUTE_VALUE;
3913,3914c3914,3915
< 	xmlFatalErr(ctxt, XML_ERR_ATTRIBUTE_NOT_STARTED, NULL);
< 	return(NULL);
---
>         xmlFatalErr(ctxt, XML_ERR_ATTRIBUTE_NOT_STARTED, NULL);
>         return(NULL);
3941,4001c3942,4002
< 	if (c == 0) break;
< 	if (c == '&') {
< 	    in_space = 0;
< 	    if (NXT(1) == '#') {
< 		int val = xmlParseCharRef(ctxt);
< 
< 		if (val == '&') {
< 		    if (ctxt->replaceEntities) {
< 			if (len + 10 > buf_size) {
< 			    growBuffer(buf, 10);
< 			}
< 			buf[len++] = '&';
< 		    } else {
< 			/*
< 			 * The reparsing will be done in xmlStringGetNodeList()
< 			 * called by the attribute() function in SAX.c
< 			 */
< 			if (len + 10 > buf_size) {
< 			    growBuffer(buf, 10);
< 			}
< 			buf[len++] = '&';
< 			buf[len++] = '#';
< 			buf[len++] = '3';
< 			buf[len++] = '8';
< 			buf[len++] = ';';
< 		    }
< 		} else if (val != 0) {
< 		    if (len + 10 > buf_size) {
< 			growBuffer(buf, 10);
< 		    }
< 		    len += xmlCopyChar(0, &buf[len], val);
< 		}
< 	    } else {
< 		ent = xmlParseEntityRef(ctxt);
< 		ctxt->nbentities++;
< 		if (ent != NULL)
< 		    ctxt->nbentities += ent->owner;
< 		if ((ent != NULL) &&
< 		    (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
< 		    if (len + 10 > buf_size) {
< 			growBuffer(buf, 10);
< 		    }
< 		    if ((ctxt->replaceEntities == 0) &&
< 		        (ent->content[0] == '&')) {
< 			buf[len++] = '&';
< 			buf[len++] = '#';
< 			buf[len++] = '3';
< 			buf[len++] = '8';
< 			buf[len++] = ';';
< 		    } else {
< 			buf[len++] = ent->content[0];
< 		    }
< 		} else if ((ent != NULL) &&
< 		           (ctxt->replaceEntities != 0)) {
< 		    if (ent->etype != XML_INTERNAL_PREDEFINED_ENTITY) {
< 			rep = xmlStringDecodeEntities(ctxt, ent->content,
< 						      XML_SUBSTITUTE_REF,
< 						      0, 0, 0);
< 			if (rep != NULL) {
< 			    current = rep;
< 			    while (*current != 0) { /* non input consuming */
---
>         if (c == 0) break;
>         if (c == '&') {
>             in_space = 0;
>             if (NXT(1) == '#') {
>                 int val = xmlParseCharRef(ctxt);
> 
>                 if (val == '&') {
>                     if (ctxt->replaceEntities) {
>                         if (len + 10 > buf_size) {
>                             growBuffer(buf, 10);
>                         }
>                         buf[len++] = '&';
>                     } else {
>                         /*
>                          * The reparsing will be done in xmlStringGetNodeList()
>                          * called by the attribute() function in SAX.c
>                          */
>                         if (len + 10 > buf_size) {
>                             growBuffer(buf, 10);
>                         }
>                         buf[len++] = '&';
>                         buf[len++] = '#';
>                         buf[len++] = '3';
>                         buf[len++] = '8';
>                         buf[len++] = ';';
>                     }
>                 } else if (val != 0) {
>                     if (len + 10 > buf_size) {
>                         growBuffer(buf, 10);
>                     }
>                     len += xmlCopyChar(0, &buf[len], val);
>                 }
>             } else {
>                 ent = xmlParseEntityRef(ctxt);
>                 ctxt->nbentities++;
>                 if (ent != NULL)
>                     ctxt->nbentities += ent->owner;
>                 if ((ent != NULL) &&
>                     (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
>                     if (len + 10 > buf_size) {
>                         growBuffer(buf, 10);
>                     }
>                     if ((ctxt->replaceEntities == 0) &&
>                         (ent->content[0] == '&')) {
>                         buf[len++] = '&';
>                         buf[len++] = '#';
>                         buf[len++] = '3';
>                         buf[len++] = '8';
>                         buf[len++] = ';';
>                     } else {
>                         buf[len++] = ent->content[0];
>                     }
>                 } else if ((ent != NULL) &&
>                            (ctxt->replaceEntities != 0)) {
>                     if (ent->etype != XML_INTERNAL_PREDEFINED_ENTITY) {
>                         rep = xmlStringDecodeEntities(ctxt, ent->content,
>                                                       XML_SUBSTITUTE_REF,
>                                                       0, 0, 0);
>                         if (rep != NULL) {
>                             current = rep;
>                             while (*current != 0) { /* non input consuming */
4008,4073c4009,4074
< 				if (len + 10 > buf_size) {
< 				    growBuffer(buf, 10);
< 				}
< 			    }
< 			    xmlFree(rep);
< 			    rep = NULL;
< 			}
< 		    } else {
< 			if (len + 10 > buf_size) {
< 			    growBuffer(buf, 10);
< 			}
< 			if (ent->content != NULL)
< 			    buf[len++] = ent->content[0];
< 		    }
< 		} else if (ent != NULL) {
< 		    int i = xmlStrlen(ent->name);
< 		    const xmlChar *cur = ent->name;
< 
< 		    /*
< 		     * This may look absurd but is needed to detect
< 		     * entities problems
< 		     */
< 		    if ((ent->etype != XML_INTERNAL_PREDEFINED_ENTITY) &&
< 			(ent->content != NULL)) {
< 			rep = xmlStringDecodeEntities(ctxt, ent->content,
< 						  XML_SUBSTITUTE_REF, 0, 0, 0);
< 			if (rep != NULL) {
< 			    xmlFree(rep);
< 			    rep = NULL;
< 			}
< 		    }
< 
< 		    /*
< 		     * Just output the reference
< 		     */
< 		    buf[len++] = '&';
< 		    while (len + i + 10 > buf_size) {
< 			growBuffer(buf, i + 10);
< 		    }
< 		    for (;i > 0;i--)
< 			buf[len++] = *cur++;
< 		    buf[len++] = ';';
< 		}
< 	    }
< 	} else {
< 	    if ((c == 0x20) || (c == 0xD) || (c == 0xA) || (c == 0x9)) {
< 	        if ((len != 0) || (!normalize)) {
< 		    if ((!normalize) || (!in_space)) {
< 			COPY_BUF(l,buf,len,0x20);
< 			while (len + 10 > buf_size) {
< 			    growBuffer(buf, 10);
< 			}
< 		    }
< 		    in_space = 1;
< 		}
< 	    } else {
< 	        in_space = 0;
< 		COPY_BUF(l,buf,len,c);
< 		if (len + 10 > buf_size) {
< 		    growBuffer(buf, 10);
< 		}
< 	    }
< 	    NEXTL(l);
< 	}
< 	GROW;
< 	c = CUR_CHAR(l);
---
>                                 if (len + 10 > buf_size) {
>                                     growBuffer(buf, 10);
>                                 }
>                             }
>                             xmlFree(rep);
>                             rep = NULL;
>                         }
>                     } else {
>                         if (len + 10 > buf_size) {
>                             growBuffer(buf, 10);
>                         }
>                         if (ent->content != NULL)
>                             buf[len++] = ent->content[0];
>                     }
>                 } else if (ent != NULL) {
>                     int i = xmlStrlen(ent->name);
>                     const xmlChar *cur = ent->name;
> 
>                     /*
>                      * This may look absurd but is needed to detect
>                      * entities problems
>                      */
>                     if ((ent->etype != XML_INTERNAL_PREDEFINED_ENTITY) &&
>                         (ent->content != NULL)) {
>                         rep = xmlStringDecodeEntities(ctxt, ent->content,
>                                                   XML_SUBSTITUTE_REF, 0, 0, 0);
>                         if (rep != NULL) {
>                             xmlFree(rep);
>                             rep = NULL;
>                         }
>                     }
> 
>                     /*
>                      * Just output the reference
>                      */
>                     buf[len++] = '&';
>                     while (len + i + 10 > buf_size) {
>                         growBuffer(buf, i + 10);
>                     }
>                     for (;i > 0;i--)
>                         buf[len++] = *cur++;
>                     buf[len++] = ';';
>                 }
>             }
>         } else {
>             if ((c == 0x20) || (c == 0xD) || (c == 0xA) || (c == 0x9)) {
>                 if ((len != 0) || (!normalize)) {
>                     if ((!normalize) || (!in_space)) {
>                         COPY_BUF(l,buf,len,0x20);
>                         while (len + 10 > buf_size) {
>                             growBuffer(buf, 10);
>                         }
>                     }
>                     in_space = 1;
>                 }
>             } else {
>                 in_space = 0;
>                 COPY_BUF(l,buf,len,c);
>                 if (len + 10 > buf_size) {
>                     growBuffer(buf, 10);
>                 }
>             }
>             NEXTL(l);
>         }
>         GROW;
>         c = CUR_CHAR(l);
4079c4080,4081
<         while (buf[len - 1] == 0x20) len--;
---
>         while ((len > 0) && (buf[len - 1] == 0x20))
>             len--;
4083c4085
< 	xmlFatalErr(ctxt, XML_ERR_LT_IN_ATTRIBUTE, NULL);
---
>         xmlFatalErr(ctxt, XML_ERR_LT_IN_ATTRIBUTE, NULL);
4085,4090c4087,4092
< 	if ((c != 0) && (!IS_CHAR(c))) {
< 	    xmlFatalErrMsg(ctxt, XML_ERR_INVALID_CHAR,
< 			   "invalid character in attribute value\n");
< 	} else {
< 	    xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
< 			   "AttValue: ' expected\n");
---
>         if ((c != 0) && (!IS_CHAR(c))) {
>             xmlFatalErrMsg(ctxt, XML_ERR_INVALID_CHAR,
>                            "invalid character in attribute value\n");
>         } else {
>             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
>                            "AttValue: ' expected\n");
4093c4095
< 	NEXT;
---
>         NEXT;
