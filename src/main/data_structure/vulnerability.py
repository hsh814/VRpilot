from main.data_structure.project import Project
from main.utils.file_util import extract_content_within_line_range
import os

class Vulnerability():

    def __init__(self, vul_id=None, fix_commit=None, vul_code_file_rel_path=None, vul_code_block_start_line=None, vul_code_block_end_line=None, vul_description=None, real_path_filename=None, project=None):

        self.vul_id = vul_id
        self.fix_commit = fix_commit
        self.vul_code_file_rel_path = vul_code_file_rel_path
        self.vul_code_block_start_line = vul_code_block_start_line
        self.vul_code_block_end_line = vul_code_block_end_line
        self.vul_description = vul_description
        self.real_path_filename = real_path_filename
        self.project = project

    def init_from_config(self, config):

        self.vul_id = config['vul_id']
        self.fix_commit = config['fix_commit']
        self.vul_code_file_rel_path = config['vul_code_file_rel_path']
        self.vul_code_block_start_line = config['vul_code_block_start_line']
        self.vul_code_block_end_line = config['vul_code_block_end_line']
        self.vul_description = config["vul_description"]
        self.vul_code_file = config["asan_scenario_buginfo"]["real_patchinfo"][0]["filename"]
        self.vul_code_line= config["asan_scenario_buginfo"]["real_patchinfo"][0]["edit_lines"][0]



    def set_project(self, project: Project):
        self.project = project
        vulnerable_file_path=os.path.join(self.project.ori_repo_dir, self.vul_code_file_rel_path)
        self.vul_code_fun = extract_content_within_line_range(
            vulnerable_file_path, self.vul_code_block_start_line, self.vul_code_block_end_line)

        self.vul_code_line = extract_content_within_line_range(
            vulnerable_file_path, self.vul_code_line, self.vul_code_line).strip()

